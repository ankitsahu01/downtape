{"version":3,"sources":["components/pages/text_contents/TwitterVimeoVideoSearchResult.js"],"names":["useStyles","makeStyles","theme","btn","marginTop","spacing","padding","videoDetailsContainer","marginBottom","formControl","margin","downloadDropdownForm","display","flexDirection","justifyContent","TwitterVideosDownloader","video","dispatch","downloadVideo","classes","formats","length","component","maxWidth","className","container","item","xs","sm","style","width","src","details","thumbnail","alt","title","subtitle","duration","variant","htmlFor","labelId","value","toDownload","url","label","onChange","e","type","payload","target","map","format","index","fontFamily","contentLength","bytesToMb","quality","size","color","aria-label","onClick","extendedIcon"],"mappings":"kGAAA,yJAeMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,IAAK,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAASJ,EAAMG,QAAQ,MAEzBE,sBAAuB,CACrBH,UAAWF,EAAMG,QAAQ,GACzBG,aAAcN,EAAMG,QAAQ,IAE9BI,YAAa,CACXC,OAAQR,EAAMG,QAAQ,IAExBM,qBAAsB,CACpBC,QAAS,OACTC,cAAe,SACfC,eAAgB,cAoFLC,UA/Ee,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAC1CC,EAAUnB,IAChB,OAAKgB,EAAMI,QAAQC,OAIjB,mCACE,cAAC,IAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,SACE,qBAAKC,UAAWL,EAAQZ,sBAAxB,SACE,eAAC,IAAD,CAAMkB,WAAS,EAACpB,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMqB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAeC,MAAO,CAAEC,MAAO,QAA/B,UACE,qBACEC,IAAKf,EAAMgB,QAAQC,UACnBC,IAAKlB,EAAMgB,QAAQG,QAErB,cAAC,IAAD,CACEA,MAAOnB,EAAMgB,QAAQG,MACrBC,SAAU,+BAAOpB,EAAMgB,QAAQK,oBAKvC,eAAC,IAAD,CACEX,MAAI,EACJC,GAAI,GACJC,GAAI,EACJJ,UAAWL,EAAQR,qBAJrB,UAME,eAAC,IAAD,CAAa2B,QAAQ,WAAWd,UAAWL,EAAQV,YAAnD,UACE,cAAC,IAAD,CAAY8B,QAAQ,mBAApB,2BAGA,cAAC,IAAD,CACEC,QAAQ,mBACRC,MAAOzB,EAAM0B,WAAWC,IACxBC,MAAM,gBACNC,SAAU,SAACC,GAAD,OACR7B,EAAS,CACP8B,KAAM,aACNC,QAAS,CAAEL,IAAKG,EAAEG,OAAOR,UAP/B,SAWGzB,EAAMI,QAAQ8B,KAAI,SAACC,EAAQC,GAC1B,OACE,cAAC,IAAD,CAAsBX,MAAOU,EAAOR,IAApC,SACE,eAAC,IAAD,CAAKU,WAAW,YAAhB,UACG,IACAF,EAAOG,cAAP,WACOC,YAAUJ,EAAOG,eADxB,OAEG,GAAI,IAJV,YAKgBH,EAAOK,QAAS,QANnBJ,WAavB,eAAC,IAAD,CACEd,QAAQ,WACRmB,KAAK,QACLC,MAAM,YACNC,aAAW,WACXC,QAAS1C,EACTM,UAAWL,EAAQhB,IANrB,UAQE,cAAC,IAAD,CAAmBqB,UAAWL,EAAQ0C,eARxC,0BAzDH","file":"static/js/3.95323863.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport ImageList from \"@material-ui/core/ImageList\";\r\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\r\nimport ImageListItemBar from \"@material-ui/core/ImageListItemBar\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport GetAppRoundedIcon from \"@material-ui/icons/GetAppRounded\";\r\nimport { bytesToMb } from \"../../Converters\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    btn: {\r\n      marginTop: theme.spacing(2),\r\n      padding: theme.spacing(1.9),\r\n    },\r\n    videoDetailsContainer: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(4),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    downloadDropdownForm: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n    },\r\n  }));\r\n  \r\n\r\nconst TwitterVideosDownloader = ({ video, dispatch, downloadVideo }) => {\r\n    const classes = useStyles();\r\n    if (!video.formats.length) {\r\n      return \"\";\r\n    }\r\n    return (\r\n      <>\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n          <div className={classes.videoDetailsContainer}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={12} sm={6}>\r\n                <ImageList>\r\n                  <ImageListItem style={{ width: \"100%\" }}>\r\n                    <img\r\n                      src={video.details.thumbnail}\r\n                      alt={video.details.title}\r\n                    />\r\n                    <ImageListItemBar\r\n                      title={video.details.title}\r\n                      subtitle={<span>{video.details.duration}</span>}\r\n                    />\r\n                  </ImageListItem>\r\n                </ImageList>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                sm={6}\r\n                className={classes.downloadDropdownForm}\r\n              >\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"quality-dropdown\">\r\n                    Video Quality\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId=\"quality-dropdown\"\r\n                    value={video.toDownload.url}\r\n                    label=\"Video Quality\"\r\n                    onChange={(e) =>\r\n                      dispatch({\r\n                        type: \"toDownload\",\r\n                        payload: { url: e.target.value },\r\n                      })\r\n                    }\r\n                  >\r\n                    {video.formats.map((format, index) => {\r\n                      return (\r\n                        <MenuItem key={index} value={format.url}>\r\n                          <Box fontFamily=\"Monospace\">\r\n                            {\" \"}\r\n                            {format.contentLength\r\n                              ? ` ${bytesToMb(format.contentLength)} Mb`\r\n                              : \"\"}{\" \"}\r\n                            &nbsp;&nbsp; {format.quality}{\" \"}\r\n                          </Box>\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                <Fab\r\n                  variant=\"extended\"\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  aria-label=\"download\"\r\n                  onClick={downloadVideo}\r\n                  className={classes.btn}\r\n                >\r\n                  <GetAppRoundedIcon className={classes.extendedIcon} />\r\n                  Download\r\n                </Fab>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Container>\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default TwitterVideosDownloader;"],"sourceRoot":""}