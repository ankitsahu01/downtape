{"version":3,"sources":["components/pages/text_contents/DownloaderPageContent.js","components/Converters.js","reducers/TwitterReducer.js","components/pages/TwitterVideosDownloader.js"],"names":["HowToDownload","lazy","AvailableVideosDownloader","AboutDownloader","DownloaderPageContent","title","img","downloadSteps","description","fallback","sToTime","duration","seconds","parseInt","minutes","hours","bytesToMb","bytes","toFixed","initialVideo","reducer","video","action","type","url","payload","contentLength","formats","filter","format","map","useStyles","makeStyles","theme","searchDiv","marginTop","spacing","display","flexDirection","alignItems","form","width","btn","padding","videoDetailsContainer","marginBottom","formControl","margin","downloadDropdownForm","justifyContent","color","palette","twitter","main","TwitterVideosDownloader","useReducer","dispatch","classes","searchVideo","e","a","preventDefault","toast","error","axios","get","trim","res","data","thumbnail","duration_ms","response","status","ShowVideoDetailsContainer","length","Container","component","maxWidth","className","Grid","container","item","xs","sm","ImageList","ImageListItem","style","src","details","alt","ImageListItemBar","subtitle","FormControl","variant","InputLabel","htmlFor","Select","labelId","value","toDownload","label","onChange","target","index","MenuItem","Box","fontFamily","quality","Fab","size","aria-label","onClick","downloadVideo","extendedIcon","window","location","href","origin","Typography","noValidate","onSubmit","TextField","fullWidth","autoFocus","required","placeholder","LinearProgress","toggleLoader","Button","position"],"mappings":"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","file":"static/js/9.d30f7ede.chunk.js","sourcesContent":["import { lazy, Suspense } from \"react\";\r\nimport TopBarProgress from \"react-topbar-progress-indicator\";\r\nconst HowToDownload = lazy(() => import(\"../common/HowToDownload\"));\r\nconst AvailableVideosDownloader = lazy(() =>\r\n  import(\"../common/AvailableDownloaders\")\r\n);\r\nconst AboutDownloader = lazy(() => import(\"../common/AboutDownloader\"));\r\n\r\nconst DownloaderPageContent = ({title, img, downloadSteps, description}) => {\r\n  return (\r\n    <>\r\n      <HowToDownload\r\n        title={title}\r\n        img={img}\r\n        downloadSteps={downloadSteps}\r\n      />\r\n      <Suspense fallback={<TopBarProgress />}>\r\n        <AvailableVideosDownloader />\r\n        <AboutDownloader\r\n          title={title}\r\n          description={description}\r\n        />\r\n      </Suspense>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DownloaderPageContent;\r\n","export const sToTime=(duration)=> {\r\n    let seconds= parseInt(duration % 60);\r\n    let minutes= duration / 60;\r\n    let hours= parseInt(minutes / 60);\r\n    minutes= parseInt(minutes % 60);\r\n\r\n    hours = (hours < 10) ? \"0\" + hours : hours;\r\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\r\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\r\n\r\n    return(hours + \":\" + minutes + \":\" + seconds);\r\n}\r\n\r\nexport const bytesToMb=(bytes)=>{\r\n    const mb= bytes/1024/1024;\r\n    return mb.toFixed(1);\r\n}","export const initialVideo={\r\n    'toggleLoader':{ 'display':'none' },\r\n    'url': '',\r\n    'toDownload': { 'url':'', 'contentLength':'' },\r\n    'details': {},\r\n    'formats':[]\r\n}\r\n\r\nexport const reducer = (video, action) => {\r\n    if(action.type && action.type===\"toDownload\"){\r\n        const url= action.payload.url;\r\n        const contentLength= video.formats.filter((format)=>{\r\n            return format.url===url\r\n        }).map((format)=>{return format.contentLength})[0];\r\n        video= { ...video, [action.type]:{url, contentLength:parseInt(contentLength)}}\r\n    }else if(action.type){\r\n        video= { ...video, [action.type]:action.payload };\r\n    }\r\n    return video;\r\n}","import { useReducer } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport ImageList from \"@material-ui/core/ImageList\";\r\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\r\nimport ImageListItemBar from \"@material-ui/core/ImageListItemBar\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport GetAppRoundedIcon from \"@material-ui/icons/GetAppRounded\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { initialVideo, reducer } from \"../../reducers/TwitterReducer\";\r\nimport { sToTime, bytesToMb } from \"../Converters\";\r\nimport DownloaderPageContent from \"./text_contents/DownloaderPageContent\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  searchDiv: {\r\n    marginTop: theme.spacing(10),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  btn: {\r\n    marginTop: theme.spacing(2),\r\n    padding: theme.spacing(1.9),\r\n  },\r\n  videoDetailsContainer: {\r\n    marginTop: theme.spacing(6),\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  downloadDropdownForm: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n  title: {\r\n    color: theme.palette.twitter.main,\r\n  },\r\n}));\r\n\r\nconst TwitterVideosDownloader = () => {\r\n  const [video, dispatch] = useReducer(reducer, initialVideo);\r\n  const classes = useStyles();\r\n\r\n  const downloadSteps = [\r\n    \"Copy the URL of the video which you need to download.\",\r\n    \"Paste URL in the search field and click “Get Video”.\",\r\n    \"Choose the Video Quality that you want to Download.\",\r\n    \"Click the “Download” button to start downloading the file.\",\r\n  ];\r\n  const AboutDownloaderDescription = `DownTape Twitter video downloader provides fastest service to download\r\n    videos in mp4, mp3, SQ, HD, Full HD quality from Twitter! For more\r\n    convenient viewing on a large screen video can be saved in high\r\n    quality. To watch videos on Android or iOS phones the medium\r\n    quality will be enough.`;\r\n\r\n  const searchVideo = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      if (video.url === \"\") {\r\n        toast.error(\"Please Enter Link!\");\r\n        return;\r\n      }\r\n      dispatch({ type: \"toggleLoader\", payload: { display: \"block\" } });\r\n      const res = await axios.get(`/api/twitter/info?url=${video.url.trim()}`);\r\n      dispatch({ type: \"toggleLoader\", payload: { display: \"none\" } });\r\n      const data = res.data;\r\n      // console.log(data);\r\n      let { title, thumbnail, duration_ms, formats } = data;\r\n      dispatch({\r\n        type: \"details\",\r\n        payload: { title, thumbnail, duration: sToTime(duration_ms / 1000) },\r\n      });\r\n      dispatch({ type: \"formats\", payload: formats });\r\n      dispatch({ type: \"toDownload\", payload: { url: formats[0].url } });\r\n    } catch (err) {\r\n      dispatch({ type: \"toggleLoader\", payload: { display: \"none\" } });\r\n      if (err.response.status === 404) {\r\n        toast.error(err.response.data);\r\n        // console.log(err.response.data);\r\n      } else {\r\n        toast.error(\"Something Went Wrong, Try Later.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const ShowVideoDetailsContainer = () => {\r\n    if (!video.formats.length) {\r\n      return \"\";\r\n    }\r\n    return (\r\n      <>\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n          <div className={classes.videoDetailsContainer}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={12} sm={6}>\r\n                <ImageList>\r\n                  <ImageListItem style={{ width: \"100%\" }}>\r\n                    <img\r\n                      src={video.details.thumbnail}\r\n                      alt={video.details.title}\r\n                    />\r\n                    <ImageListItemBar\r\n                      title={video.details.title}\r\n                      subtitle={<span>{video.details.duration}</span>}\r\n                    />\r\n                  </ImageListItem>\r\n                </ImageList>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                sm={6}\r\n                className={classes.downloadDropdownForm}\r\n              >\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"quality-dropdown\">\r\n                    Video Quality\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId=\"quality-dropdown\"\r\n                    value={video.toDownload.url}\r\n                    label=\"Video Quality\"\r\n                    onChange={(e) =>\r\n                      dispatch({\r\n                        type: \"toDownload\",\r\n                        payload: { url: e.target.value },\r\n                      })\r\n                    }\r\n                  >\r\n                    {video.formats.map((format, index) => {\r\n                      return (\r\n                        <MenuItem key={index} value={format.url}>\r\n                          <Box fontFamily=\"Monospace\">\r\n                            {\" \"}\r\n                            {format.contentLength\r\n                              ? ` ${bytesToMb(format.contentLength)} Mb`\r\n                              : \"\"}{\" \"}\r\n                            &nbsp;&nbsp; {format.quality}{\" \"}\r\n                          </Box>\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                <Fab\r\n                  variant=\"extended\"\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  aria-label=\"download\"\r\n                  onClick={downloadVideo}\r\n                  className={classes.btn}\r\n                >\r\n                  <GetAppRoundedIcon className={classes.extendedIcon} />\r\n                  Download\r\n                </Fab>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Container>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const downloadVideo = async (e) => {\r\n    e.preventDefault();\r\n    if (process.env.NODE_ENV === \"production\") {\r\n      window.location.href = `${window.location.origin}/api/twitter/download?url=${video.toDownload.url}&clen=${video.toDownload.contentLength}&title=${video.details.title}`;\r\n    } else {\r\n      window.location.href = `http://localhost:5000/api/twitter/download?url=${video.toDownload.url}&clen=${video.toDownload.contentLength}&title=${video.details.title}`;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>\r\n          Twitter Videos Downloader - DOWNTAPE Free Twitter Downloader Online\r\n        </title>\r\n        {/* <link rel=\"canonical\" href=\"https://www.downtape.herokuapp.com/youtube-video-downloader\" />\r\n                <meta name=\"description\" content=\"Download YouTube videos Online Free on DOWNTAPE. We provides you the best YouTube video downloader, In which you can download YouTube videos in mp4\"/>\r\n                <meta name=\"keywords\" content=\"youtube video download, youtube video download online, online youtube video download, free youtube video download, youtube video download by link, youtube video download free, save youtube video download, youtube video download pc, youtube video download link, youtube video download website, how to youtube video download, youtube video download site, youtube video download mp4, youtube video download online free, youtube video downloader, online youtube video downloader, youtube video downloader for pc, youtube video downloader free download, best youtube video downloader, free youtube video downloader, download youtube video, download youtube videos, how to download youtube video, how to download youtube video in laptop, how download youtube video, how to download youtube videos in mobile, download youtube video online, how to download youtube video online, download youtube video online free, how download youtube video online\" /> */}\r\n      </Helmet>\r\n      <Container component=\"main\" maxWidth=\"md\">\r\n        <div className={classes.searchDiv}>\r\n          <Typography component=\"h1\" variant=\"h4\">\r\n            <span className={classes.title}>Twitter</span> Video Downloader\r\n          </Typography>\r\n          <form className={classes.form} noValidate onSubmit={searchVideo}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={12} sm={10}>\r\n                <TextField\r\n                  type=\"text\"\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  fullWidth\r\n                  autoFocus\r\n                  required\r\n                  label=\"Enter Link\"\r\n                  placeholder=\"e.g. https://twitter.com/i/status/1430466398069743617\"\r\n                  value={video.url}\r\n                  onChange={(e) =>\r\n                    dispatch({ type: \"url\", payload: e.target.value })\r\n                  }\r\n                />\r\n                <LinearProgress style={video.toggleLoader} />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.btn}\r\n                >\r\n                  Get Video\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n      <ShowVideoDetailsContainer />\r\n      <DownloaderPageContent\r\n        title=\"Twitter\"\r\n        img=\"twitter.jpg\"\r\n        downloadSteps={downloadSteps}\r\n        description={AboutDownloaderDescription}\r\n      />\r\n      <ToastContainer position=\"top-center\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TwitterVideosDownloader;\r\n"],"sourceRoot":""}